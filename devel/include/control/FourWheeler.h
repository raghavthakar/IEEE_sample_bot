// Generated by gencpp from file control/FourWheeler.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_FOURWHEELER_H
#define CONTROL_MESSAGE_FOURWHEELER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control
{
template <class ContainerAllocator>
struct FourWheeler_
{
  typedef FourWheeler_<ContainerAllocator> Type;

  FourWheeler_()
    : left(0.0)
    , right(0.0)  {
    }
  FourWheeler_(const ContainerAllocator& _alloc)
    : left(0.0)
    , right(0.0)  {
  (void)_alloc;
    }



   typedef float _left_type;
  _left_type left;

   typedef float _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::control::FourWheeler_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::FourWheeler_<ContainerAllocator> const> ConstPtr;

}; // struct FourWheeler_

typedef ::control::FourWheeler_<std::allocator<void> > FourWheeler;

typedef boost::shared_ptr< ::control::FourWheeler > FourWheelerPtr;
typedef boost::shared_ptr< ::control::FourWheeler const> FourWheelerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::FourWheeler_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::FourWheeler_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control::FourWheeler_<ContainerAllocator1> & lhs, const ::control::FourWheeler_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control::FourWheeler_<ContainerAllocator1> & lhs, const ::control::FourWheeler_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::control::FourWheeler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::FourWheeler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::FourWheeler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::FourWheeler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::FourWheeler_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::FourWheeler_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::FourWheeler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a927990ab5d5c3d628e2d52b8533e52";
  }

  static const char* value(const ::control::FourWheeler_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a927990ab5d5c3dULL;
  static const uint64_t static_value2 = 0x628e2d52b8533e52ULL;
};

template<class ContainerAllocator>
struct DataType< ::control::FourWheeler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/FourWheeler";
  }

  static const char* value(const ::control::FourWheeler_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::FourWheeler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left\n"
"float32 right\n"
;
  }

  static const char* value(const ::control::FourWheeler_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::FourWheeler_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FourWheeler_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::FourWheeler_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::FourWheeler_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<float>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<float>::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_FOURWHEELER_H
